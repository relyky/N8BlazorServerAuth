@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc
@using N8BlazorServerAuth.Services

@page "/Account/Login"
@* @attribute [StreamRendering] 啟動就無法寫入 HttpContext.SignInAsync。(Orz) *@
@inject NavigationManager navSvc
@inject ILogger<Login> logger
@inject AccountService accSvc

<PageTitle>Login</PageTitle>
@*
  登入畫面為 SSG，不支援 interactive 操作行為。
*@

@* 考慮用 Bootstrp5 實作登入畫面
  <HeadContent>
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
  </HeadContent>
 *@

@* @if (f_processing)
{
  <h1>processing...</h1>
  return;
} *@

<AuthorizeView Context="auth">
  <Authorized>
    <MudText Typo=Typo.h2>
      @($"{auth.User.Identity?.Name} 已登入系統")
    </MudText>
  </Authorized>
  <Authorizing>
    <MudText Typo=Typo.h2>登入中</MudText>
  </Authorizing>
  <NotAuthorized>

    <EditForm Model="Input" method="post" OnValidSubmit=LoginUserAsync FormName="login">
      <DataAnnotationsValidator />
      <MudCard Class="ma-16 pa-4 mx-auto" Style="max-width:400px;background:var(--mud-palette-background-grey);">
        <MudCardHeader>
          <CardHeaderContent>
            <MudText Typo=Typo.h6>登入</MudText>
          </CardHeaderContent>
          <CardHeaderActions>
            <MudIconButton Icon=@Icons.Material.Filled.Settings Color=Color.Default />
          </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
          @* 在 SSG form input 欄位需加上 name 屬性 *@
          <MudTextField T="string" Label="Email" name="Input.Email" Placeholder="name@example.com"
                        @bind-Value="Input.Email" For="() => Input.Email"
                        Variant=Variant.Outlined Class="mb-4" Style="background:var(--mud-palette-background);" />
          <MudTextField T="string" Label="Password" name="Input.Password" Placeholder="password"
                        @bind-Value="Input.Password" For="() => Input.Password" InputType=InputType.Password
                        Variant=Variant.Outlined Class="mb-4" Style="background:var(--mud-palette-background);" />

          @* <MudCheckBox T="bool" Color=Color.Primary Label="記住我" /> *@

          <SsgCheckBox Label="記住我" Name="Input.RememberMe" @bind-Value=@Input.RememberMe For="() => Input.RememberMe" />

          @* <ValidationSummary role="alert" class="mud-alert-text-error" /> *@

          @if (errorMessage != null)
          {
            <MudAlert Severity=Severity.Error>
              @errorMessage
            </MudAlert>
          }

        </MudCardContent>
        <MudCardActions Class="justify-center">
          <MudButton Variant=Variant.Filled Color=Color.Primary ButtonType=ButtonType.Submit Disabled=@f_processing Size=Size.Large>
            @if (f_processing)
            {
              <MudProgressCircular Size=Size.Small Indeterminate />
              <MudText Class="ms-2">登入中…</MudText>
            }
            else
            {
              <MudIcon Icon=@Icons.Material.Filled.Login />
              <MudText Class="ms-2">登入</MudText>
            }
          </MudButton>
        </MudCardActions>
      </MudCard>

    </EditForm>

  </NotAuthorized>
</AuthorizeView>

@code {
  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  string? errorMessage;
  bool f_processing = false;

  protected override async Task OnInitializedAsync()
  {
    f_processing = true;

    if (HttpMethods.IsGet(HttpContext.Request.Method))
    {
      // Clear the existing external cookie to ensure a clean login process
      await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
    }

    f_processing = false;
  }

  [ValidateAntiForgeryToken]
  public async Task LoginUserAsync()
  {
    f_processing = true;
    errorMessage = null;

    await Task.Delay(2000);
    var authUser = await Task.Run(() => accSvc.Authenticate($"{Input.Email}:{Input.Password}:{Input.RememberMe}"));
    if (authUser == null)
    {
      errorMessage = "Error: Invalid login attempt.";
      f_processing = false;
      return;
    }

    // 使用者聲明
    var userClaims = new List<Claim>
    {
        new Claim(ClaimTypes.Name, authUser.UserId), // 使用者識別碼
        new Claim(ClaimTypes.Sid, authUser.AuthGuid.ToString()), // 登入識別序號
        new Claim(ClaimTypes.GivenName, authUser.UserName), // 顯示名稱
    };

    // 使用者聲明－角色
    foreach (var role in authUser.Roles)
      userClaims.Add(new Claim(ClaimTypes.Role, role));

    var userIdentity = new ClaimsIdentity(userClaims, CookieAuthenticationDefaults.AuthenticationScheme);
    var authProperties = new AuthenticationProperties
      {
        IsPersistent = authUser.RememberMe,
        IssuedUtc = authUser.IssuedUtc,
        ExpiresUtc = authUser.ExpiresUtc,
        RedirectUri = ReturnUrl, // this.Request.Host.Value
        //AllowRefresh = <bool>,
        // Refreshing the authentication session should be allowed.
      };

    //# 執行 Cookie-Base Auth 註冊
    await HttpContext.SignInAsync(
        CookieAuthenticationDefaults.AuthenticationScheme,
        new ClaimsPrincipal(userIdentity),
        authProperties);

    logger.LogInformation("User logged in.");
    navSvc.NavigateTo(ReturnUrl ?? "/", true);
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    public string Email { get; set; } = "foo@mail.server";

    [Required]
    [DataType(DataType.Password)]
    public string Password { get; set; } = "user credential";

    [Display(Name = "Remember me?")]
    public bool RememberMe { get; set; }
  }
}
