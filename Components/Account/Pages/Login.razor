@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc
@using N8BlazorServerAuth.Services

@page "/Account/Login"
@inject NavigationManager navSvc
@inject ILogger<Login> Logger
@inject AccountService accSvc

<PageTitle>Log in</PageTitle>
@* 
  此登入畫面使用 Bootstrap 5 實作。 
  此登入畫面 不支援 interactive render。
*@

<HeadContent>
  <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
</HeadContent>

<div class="d-flex flex-column justify-content-center align-items-center" style="height:100vh;">
  <h1>Log in</h1>

  @if (errorMessage != null)
  {
    <div class="alert alert-danger" role="alert">
      @errorMessage
    </div>
  }

  <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <div class="card" style="width:400px;">
      <div class="card-body">

        <h3>Use a local account to log in.</h3>
        <hr />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
          <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
          <label for="email" class="form-label">Email</label>
          <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
          <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
          <label for="password" class="form-label">Password</label>
          <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="checkbox mb-3">
          <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            Remember me
          </label>
        </div>
        <div>
          <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>

      </div>
    </div>
  </EditForm>
</div>

@code {
  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  string? errorMessage;

  protected override async Task OnInitializedAsync()
  {
    if (HttpMethods.IsGet(HttpContext.Request.Method))
    {
      // Clear the existing external cookie to ensure a clean login process
      await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
    }
  }

  [ValidateAntiForgeryToken]
  public async Task LoginUser()
  {
    errorMessage = null;
    var authUser = accSvc.Authenticate($"{Input.Email}:{Input.Password}:{Input.RememberMe}");
    if (authUser == null)
    {
      errorMessage = "Error: Invalid login attempt.";
      return;
    }

    // 使用者聲明
    var userClaims = new List<Claim>
    {
        new Claim(ClaimTypes.Name, authUser.UserId), // 使用者識別碼
        new Claim(ClaimTypes.Sid, authUser.AuthGuid.ToString()), // 登入識別序號
        new Claim(ClaimTypes.GivenName, authUser.UserName), // 顯示名稱
    };

    // 使用者聲明－角色
    foreach (var role in authUser.Roles)
      userClaims.Add(new Claim(ClaimTypes.Role, role));

    var userIdentity = new ClaimsIdentity(userClaims, CookieAuthenticationDefaults.AuthenticationScheme);
    var authProperties = new AuthenticationProperties
      {
        IsPersistent = authUser.RememberMe,
        IssuedUtc = authUser.IssuedUtc,
        ExpiresUtc = authUser.ExpiresUtc,
        RedirectUri = ReturnUrl, // this.Request.Host.Value
        //AllowRefresh = <bool>,
        // Refreshing the authentication session should be allowed.
      };

    //# 執行 Cookie-Base Auth 註冊
    await HttpContext.SignInAsync(
        CookieAuthenticationDefaults.AuthenticationScheme,
        new ClaimsPrincipal(userIdentity),
        authProperties);

    Logger.LogInformation("User logged in.");
    navSvc.NavigateTo(ReturnUrl ?? "/", true);
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    public string Email { get; set; } = "foo@mail.server";

    [Required]
    [DataType(DataType.Password)]
    public string Password { get; set; } = "user credential";

    [Display(Name = "Remember me?")]
    public bool RememberMe { get; set; }
  }
}
