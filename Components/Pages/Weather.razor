@page "/weather"
@attribute [Authorize]

<PageTitle>Weather</PageTitle>

<MudContainer>
  <MudText Typo=Typo.h3>Weather</MudText>
  <MudText Typo=Typo.body1>This component demonstrates showing data.</MudText>
  <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=HandleRefresh>刷新</MudButton>

  @if (f_loading)
  {
    <MudProgressLinear Indeterminate Color=Color.Info />
  }
  else if (forecasts != null)
  {
    <MudDataGrid Items=forecasts>
      <Columns>
        <PropertyColumn Property="m => m.Date" Title="Date">
          <CellTemplate>
            @context.Item.Date.ToShortDateString()
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="m => m.TemperatureC" Title="Temp. (C)" />
        <PropertyColumn Property="m => m.TemperatureF" Title="Temp. (F)" />
        <PropertyColumn Property="m => m.Summary" Title="Summary" />
      </Columns>
    </MudDataGrid>
  }

</MudContainer>

@code {
  WeatherForecast[]? forecasts;
  bool f_loading = false;

  protected override async Task OnInitializedAsync()
  {
    await HandleRefresh();
  }

  // protected override async Task OnAfterRenderAsync(bool firstRender)
  // {
  //   if(firstRender)
  //   {
  //     await HandleRefresh();
  //     StateHasChanged();
  //   }
  // }

  async Task HandleRefresh()
  {
    try
    {
      f_loading = true;

      // Simulate asynchronous loading to demonstrate a loading indicator
      await Task.Delay(500);

      var startDate = DateOnly.FromDateTime(DateTime.Now);
      var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
      forecasts = Enumerable.Range(1, 20).Select(index => new WeatherForecast
        {
          Date = startDate.AddDays(index),
          TemperatureC = Random.Shared.Next(-20, 55),
          Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }
    finally
    {
      f_loading = false;
    }
  }

  private class WeatherForecast
  {
    public DateOnly Date { get; set; }
    public int TemperatureC { get; set; }
    public string? Summary { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }
}
